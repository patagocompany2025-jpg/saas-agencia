// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Usuários do sistema
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  role        String   // 'socio' ou 'vendedor'
  status      String   // 'active' ou 'inactive'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  salesTasks      SalesTask[]
  deliveryTasks   DeliveryTask[]
  postSaleTasks   PostSaleTask[]
  clients         Client[]

  @@map("users")
}

// Clientes
model Client {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  company   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?  // Usuário que criou o cliente
  user      User?    @relation(fields: [userId], references: [id])

  // Relacionamentos
  salesTasks    SalesTask[]
  deliveryTasks DeliveryTask[]
  postSaleTasks PostSaleTask[]

  @@map("clients")
}

// Pipeline de Vendas (compartilhado entre todos)
model SalesTask {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   // 'prospecting', 'qualification', 'proposal', 'negotiation', 'closed-won', 'closed-lost'
  value       Float?
  priority    String   // 'low', 'medium', 'high'
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id])
  userId      String   // Usuário que criou/atualizou
  user        User     @relation(fields: [userId], references: [id])

  @@map("sales_tasks")
}

// Entrega de Serviço (compartilhado entre todos)
model DeliveryTask {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   // 'pending', 'in-progress', 'completed', 'cancelled'
  priority    String   // 'low', 'medium', 'high'
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id])
  userId      String   // Usuário que criou/atualizou
  user        User     @relation(fields: [userId], references: [id])

  @@map("delivery_tasks")
}

// Pós-Venda (compartilhado entre todos)
model PostSaleTask {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   // 'pending', 'in-progress', 'completed', 'cancelled'
  priority    String   // 'low', 'medium', 'high'
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id])
  userId      String   // Usuário que criou/atualizou
  user        User     @relation(fields: [userId], references: [id])

  @@map("post_sale_tasks")
}

// Log de atividades para sincronização
model ActivityLog {
  id        String   @id @default(cuid())
  action    String   // 'create', 'update', 'delete'
  table     String   // 'sales', 'delivery', 'post_sale'
  recordId  String   // ID do registro modificado
  data      String   // JSON com os dados modificados
  userId    String   // Usuário que fez a modificação
  createdAt DateTime @default(now())

  @@map("activity_logs")
}